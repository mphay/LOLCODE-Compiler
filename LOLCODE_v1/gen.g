tree grammar gen;

//************************************************************
// This is the code generation back end for our simple1 compiler.
// The code generated by the simple1 compiler will be used by the 
// lolcode interpreter. Use this version if using get statements.
// Monirath Phay is the author of this compiler. 

options{
    tokenVocab=simple1;		// use token definitions from simple1
    ASTLabelType=CommonTree;	// use CommonTree AST
    backtrack=true;		// we need backtracking because of if-then-else
}



prog returns [String code]
   	:	{$code = "HAI \n";} ^(STMTLIST (stmt {$code += $stmt.code;})+) {$code += "KTHXBYE\n";}
        ;

stmt returns [String code]
	:	^('=' VAR exp)	
			{
			  $code = $VAR.text + " R " + $exp.code + "\n";		// assign a value to the variable
			} 
	|	^('get' VAR)
			{
			  $code = "I HAS A " + $VAR.text+"\n";			// declare a variable
			  $code += "GIMMEH " + $VAR.text+"\n";			// ask the user for an input and
										// read it into the variable
			}
	|	^('put' exp)	
			{
			  $code = "VISIBLE " + $exp.code+"\n";			// print the value
			}
	|	^('while' exp s=stmt)	
			{ 							// while loop
                    	  String label = "LOOP";		
                          $code = "IM IN YR " + label;				// begins loop
                          $code += "\n" + $s.code;				// code to be executed in loop
			  $code += $exp.code + ", O RLY?\n";			// exit condition
			  $code += "YA RLY \n" + $s.code + "GTFO, OIC\n";	// breaks the loop	
	           	  $code += "IM OUTTA YR " + label + "\n"; 		// end of loop
	           	}
	|	^('if' exp s=stmt) 
			{							// if statement 
                          $code = $exp.code + ", O RLY?\n";			// condition
                          $code += "YA RLY \n" + $s.code + "OIC\n";		// code executed if condition satisfied
	           	} 
	|	^('if' exp s1=stmt s2=stmt)	
			{ 							// if stament with an else clause 
                          $code = $exp.code + ", O RLY?\n";			// condition
                          $code += "YA RLY \n" + $s1.code;			// code executed if condition satisfied  
                          $code += "NO WAI \n" + $s2.code;			// else
                          $code += "OIC \n";					// end if statement
	           	} 
	|	{$code = "";} ^(BLOCKSTMT (s=stmt {$code += $s.code;})+)	// block statements	
	;

exp returns [String code]
	// types of expressions
	:	^('==' e1=exp e2=exp) 	{$code = "BOTH SAEM " + $e1.code + " AN " + $e2.code;} 					// eq operation
	|	^('<=' e1=exp e2=exp) 	{$code = "BOTH SAEM " + $e1.code + " AN BIGGR OF " + $e1.code + " AN " + $e2.code;} 	// leq operation
	|	^('+' e1=exp e2=exp) 	{$code = "SUM OF " + $e1.code + " AN " + $e2.code;} 					// addition operation
	|	^('-' e1=exp e2=exp) 	{$code = "DIFF OF " + $e1.code + " AN " + $e2.code;} 					// subtraction operation
	|	^('*' e1=exp e2=exp) 	{$code = "PRODUKT OF " + $e1.code + " AN " + $e2.code;} 				// multiplication operation
	|	^('/' e1=exp e2=exp) 	{$code = "QUOSHUNT OF " + $e1.code + " AN " + $e2.code;} 				// division operation
	|	VAR 			{$code = $VAR.text;}									// VAR
	|	NUM 			{$code = $NUM.text;}									// NUM
	;
	


